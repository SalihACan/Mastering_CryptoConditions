Bölüm 8 - varlıklar örneği 

Chapter 8 - assets example


Bazı açılardan CC'nin en karmaşık varlıkları, aslında kodladığım ilk şeydi.
Bununla birlikte, DEX işlevleri için bile basit bir model kullanmakta, bu yüzden oldukça ilgili olsa da,
zarın meydan okuma / tepki karmaşıklığına sahip değildir.

In some respects the assets CC is the most complex, it was actually the first one that I coded. 
It is however using a simple model, even for the DEX functions, so while it is quite involved, 
it does not have the challenge/response complexity of dice.


Jeton oluşturmanın iki önemli yönü vardır. Birincisi, her özel satoshi için, onu oluşturmak ve takip etmektir.
İkincisi, ticari varlıkların DEX fonksiyonlarının nasıl uygulanacağını çözmektir.

There are two major aspects to creating tokens. First is to create and track it, down to every specific satoshi. 
The second is solving how to implement DEX functions of trading assets.


Kullanılan model "renkli paralar" dır. 
Bu, txid'i oluşturan belirtecin, 
tüm satoshis tarafından belirtildiği gibi varlıkları yayınladığı anlamına gelir, böylece 1 COIN 100 milyon jetonu kilitler.
Bu çarpma, bol miktarda varlığın oluşturulmasına izin verecektir. İzin verilen tüm işlemlerde oluşturulan tüm belirteçleri korumak istiyoruz.
Bunun başarılması, tüm işlemlerin belirtilen işlemle birlikte OP_RETURN değerinde jeton oluşturma txid'ini eklemesidir.
Jetonların sahipliği, kullanıcının pubkey için CC adresindeki renkli satoshis tarafından temsil edilir.
Bu, standart utxo sisteminin tokenlerin sahipliğini otomatik olarak takip etmesine izin verir. 
Bu otomatik miras, bir CC sözleşmesinin uygulanması için gereken biraz daha fazla işi telafi eden 
utxo CC sözleşmelerinin büyük avantajlarından biridir.

The model used is "colored coins". 
This means that the token creating txid issues the assets as denoted by all the satoshis, so locking 1 COIN issues 100 million tokens. 
This multiplication will allow creation of plenty of assets. We want to preserve all the tokens created across all allowed operations. 
The way this is achieved is that all operations attaches the token creation txid in its OP_RETURN, along with the specified operation.
Ownership of tokens are represented by the colored satoshis in the CC address for the user's pubkey. 
This allows using the standard utxo system to automatically track ownership of the tokens. 
This automatic inheritance is one of the big advantages of utxo CC contracts that compensates for the slightly more work needed to implement a CC contract.


Bu yüzden şimdi CC adresleri, tüm belirteçlerin listesi ve belirli belirteçler hakkında bilgi ve belirteçleri oluşturma ve 
aktarma yeteneği sağlayan standart CC adresleri, listesi ve bilgi komutlarına sahibiz.
Herhangi bir sayıda jeton 1'den çok büyük sayılara kadar oluşturulabilir ve standart addressbalance, addressutxo komutları kullanılarak, 
belirli bir pubkey için sahip olunan tüm varlıkların ayrıntıları belirlenebilir.

So now we have the standard CC addresss, list and info commands that provide the CC addresses, 
list of all tokens and info on specific tokens and the ability to create and transfer tokens. 
Any amount of tokens can be created from 1 to very large numbers and using standard addressbalance, addressutxo type of commands, the details of all assets owned can be determined for a specific pubkey.


Şimdi, başlangıçta hayal edilenden çok daha basit olan tonlamaların DEX bölümünü çözebiliriz. 
Belirli bir jeton için teklif vermeye başlıyoruz. 
Teklif için gerekli fonlar, istenen jeton ve fiyat ile birlikte global CC adresine kilitlenir.
Bu, bir sipariş defteri rpc çağrısı yoluyla listelenebilen bir teklif utxo oluşturur.
Teklifi doldurmak için, belirli bir teklif türü, uygun sayıda varlık ve değişiklik yapılmadan doldurulur.
tüm tutar doldurulursa, artık sipariş defterinde görünmeyecektir.

Now we can solve the DEX part of the tokenization, which turns out to be much simpler than initially imagined. 
We start with bidding for a specific token. 
Funds for the bid are locked into the global CC address, along with the desired token and price. 
This creates a bid utxo that is able to be listed via an orderbook rpc call. 
To fill the bid, a specific bid utxo is spent with the appropriate number of assets and change and updated price for the unfilled amount. 
if the entire amount is filled, then it wont appear in the orderbook anymore.


Gerekli fiyatı ile birlikte varlıklarını kilitleyerek iş ister.
Kısmi dolgular desteklenebilir ve rpc çağrıları, 
belirli bir miktarın doldurulması için gerekli miktardaki fonları otomatik olarak toplayarak 
ihtiyaç duyulan fonların / varlıkların yararsızlığını maskeleyebilir.
Bekleyen teklifi iptal etme veya soru sorma çağrıları ile, COIN merkezli bir DEX'i destekleyebilen eksiksiz bir RPC çağrıları seti alırız.

asks work by locking assets along with the required price. 
Partial fills can be supported and the rpc calls can mask the utxo-ness of the funds/assets needed by automatically gathering the required amount of funds to fill the specific amount.
With calls to cancel the pending bid or ask, we get a complete set of rpc calls that can support a COIN-centric DEX. 


Gelecekte, bir token swap rpc'nin bir diğeri için bir jetonun doğrudan değiştirilmesine izin verilebilmesi bekleniyor.
ancak ilk başta, takas belirtilerinin belirtilmesi için yeterli miktarda hacmin bulunmaması beklenir, bu nedenle ilk uygulamadan çıkarılmıştır. 

In the future, it is expected that a token swap rpc can be supported to allow directly swapping one token for another, 
but at first it is expected that there wont be sufficient volumes for such token to token swaps, so it was left out of the initial implementation.


Sadece bu rpc çağrıları ve ilgili doğrulama ile, belirteçleri çıkarma ve bunları bir DEX'te işleme yeteneği elde ederiz! 

With just these rpc calls and associated validation, we get the ability to issue tokens and trade them on a DEX!



create
 vin.0: normal input
 vout.0: issuance assetoshis to CC
 vout.1: tag sent to normal address of AssetsCCaddress
 vout.2: normal output for change (if any)
 vout.n-1: opreturn [EVAL_ASSETS] ['c'] [origpubkey] "<assetname>" "<description>"
 
transfer
 vin.0: normal input
 vin.1 .. vin.n-1: valid CC outputs
 vout.0 to n-2: assetoshis output to CC
 vout.n-2: normal output for change (if any)
 vout.n-1: opreturn [EVAL_ASSETS] ['t'] [assetid]
 
buyoffer:
 vins.: normal inputs (bid + change)
 vout.0: amount of bid to unspendable
 vout.1: normal output for change (if any)
 vout.n-1: opreturn [EVAL_ASSETS] ['b'] [assetid] [amount of asset required] [origpubkey]

cancelbuy:
 vin.0: normal input
 vin.1: unspendable.(vout.0 from buyoffer) buyTx.vout[0]
 vout.0: vin.1 value to original pubkey buyTx.vout[0].nValue -> [origpubkey]
 vout.1: normal output for change (if any)
 vout.n-1: opreturn [EVAL_ASSETS] ['o'] [assetid]
 
fillbuy:
 vin.0: normal input
 vin.1: unspendable.(vout.0 from buyoffer) buyTx.vout[0]
 vin.2+: valid CC output satisfies buyoffer (tx.vin[2])->nValue
 vout.0: remaining amount of bid to unspendable
 vout.1: vin.1 value to signer of vin.2
 vout.2: vin.2 assetoshis to original pubkey
 vout.3: CC output for assetoshis change (if any)
 vout.4: normal output for change (if any)
 vout.n-1: opreturn [EVAL_ASSETS] ['B'] [assetid] [remaining asset required] [origpubkey]
selloffer:
 vin.0: normal input
 vin.1+: valid CC output for sale
 vout.0: vin.1 assetoshis output to CC to unspendable
 vout.1: CC output for change (if any)
 vout.2: normal output for change (if any)
 vout.n-1: opreturn [EVAL_ASSETS] ['s'] [assetid] [amount of native coin required] [origpubkey]

cancel:
 vin.0: normal input
 vin.1: unspendable.(vout.0 from exchange or selloffer) sellTx/exchangeTx.vout[0] inputTx
 vout.0: vin.1 assetoshis to original pubkey CC sellTx/exchangeTx.vout[0].nValue -> [origpubkey]
 vout.1: normal output for change (if any)
 vout.n-1: opreturn [EVAL_ASSETS] ['x'] [assetid]
 
fillsell:
 vin.0: normal input
 vin.1: unspendable.(vout.0 assetoshis from selloffer) sellTx.vout[0]
 vin.2+: normal output that satisfies selloffer (*tx.vin[2])->nValue
 vout.0: remaining assetoshis -> unspendable
 vout.1: vin.1 assetoshis to signer of vin.2 sellTx.vout[0].nValue -> any
 vout.2: vin.2 value to original pubkey [origpubkey]
 vout.3: CC asset for change (if any)
 vout.4: CC asset2 for change (if any) 'E' only
 vout.5: normal output for change (if any)
 vout.n-1: opreturn [EVAL_ASSETS] ['S'] [assetid] [amount of coin still required] [origpubkey]
